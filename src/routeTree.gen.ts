/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteRouteImport } from './routes/users/route'
import { Route as OrganiserRouteRouteImport } from './routes/organiser/route'
import { Route as AdminRouteRouteImport } from './routes/admin/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users/index'
import { Route as TicketsIndexRouteImport } from './routes/tickets/index'
import { Route as RegisterIndexRouteImport } from './routes/register/index'
import { Route as OrganiserIndexRouteImport } from './routes/organiser/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as HowItWorksIndexRouteImport } from './routes/how-it-works/index'
import { Route as EventsIndexRouteImport } from './routes/events/index'
import { Route as CategoriesIndexRouteImport } from './routes/categories/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as UsersUserIdRouteImport } from './routes/users/$userId'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminTicketsRouteImport } from './routes/admin/tickets'
import { Route as AdminRegisteredEventsRouteImport } from './routes/admin/registeredEvents'
import { Route as AdminEventsRouteImport } from './routes/admin/events'
import { Route as AdminPaymentsIndexRouteImport } from './routes/admin/payments/index'

const UsersRouteRoute = UsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganiserRouteRoute = OrganiserRouteRouteImport.update({
  id: '/organiser',
  path: '/organiser',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRouteRoute = AdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRouteRoute,
} as any)
const TicketsIndexRoute = TicketsIndexRouteImport.update({
  id: '/tickets/',
  path: '/tickets/',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterIndexRoute = RegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganiserIndexRoute = OrganiserIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrganiserRouteRoute,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const HowItWorksIndexRoute = HowItWorksIndexRouteImport.update({
  id: '/how-it-works/',
  path: '/how-it-works/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIndexRoute = EventsIndexRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesIndexRoute = CategoriesIndexRouteImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRouteRoute,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminTicketsRoute = AdminTicketsRouteImport.update({
  id: '/tickets',
  path: '/tickets',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminRegisteredEventsRoute = AdminRegisteredEventsRouteImport.update({
  id: '/registeredEvents',
  path: '/registeredEvents',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminEventsRoute = AdminEventsRouteImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => AdminRouteRoute,
} as any)
const AdminPaymentsIndexRoute = AdminPaymentsIndexRouteImport.update({
  id: '/payments/',
  path: '/payments/',
  getParentRoute: () => AdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/organiser': typeof OrganiserRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/admin/events': typeof AdminEventsRoute
  '/admin/registeredEvents': typeof AdminRegisteredEventsRoute
  '/admin/tickets': typeof AdminTicketsRoute
  '/admin/users': typeof AdminUsersRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/admin/': typeof AdminIndexRoute
  '/categories': typeof CategoriesIndexRoute
  '/events': typeof EventsIndexRoute
  '/how-it-works': typeof HowItWorksIndexRoute
  '/login': typeof LoginIndexRoute
  '/organiser/': typeof OrganiserIndexRoute
  '/register': typeof RegisterIndexRoute
  '/tickets': typeof TicketsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/admin/payments': typeof AdminPaymentsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/events': typeof AdminEventsRoute
  '/admin/registeredEvents': typeof AdminRegisteredEventsRoute
  '/admin/tickets': typeof AdminTicketsRoute
  '/admin/users': typeof AdminUsersRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/admin': typeof AdminIndexRoute
  '/categories': typeof CategoriesIndexRoute
  '/events': typeof EventsIndexRoute
  '/how-it-works': typeof HowItWorksIndexRoute
  '/login': typeof LoginIndexRoute
  '/organiser': typeof OrganiserIndexRoute
  '/register': typeof RegisterIndexRoute
  '/tickets': typeof TicketsIndexRoute
  '/users': typeof UsersIndexRoute
  '/admin/payments': typeof AdminPaymentsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/organiser': typeof OrganiserRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/admin/events': typeof AdminEventsRoute
  '/admin/registeredEvents': typeof AdminRegisteredEventsRoute
  '/admin/tickets': typeof AdminTicketsRoute
  '/admin/users': typeof AdminUsersRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/admin/': typeof AdminIndexRoute
  '/categories/': typeof CategoriesIndexRoute
  '/events/': typeof EventsIndexRoute
  '/how-it-works/': typeof HowItWorksIndexRoute
  '/login/': typeof LoginIndexRoute
  '/organiser/': typeof OrganiserIndexRoute
  '/register/': typeof RegisterIndexRoute
  '/tickets/': typeof TicketsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/admin/payments/': typeof AdminPaymentsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/organiser'
    | '/users'
    | '/admin/events'
    | '/admin/registeredEvents'
    | '/admin/tickets'
    | '/admin/users'
    | '/users/$userId'
    | '/admin/'
    | '/categories'
    | '/events'
    | '/how-it-works'
    | '/login'
    | '/organiser/'
    | '/register'
    | '/tickets'
    | '/users/'
    | '/admin/payments'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/events'
    | '/admin/registeredEvents'
    | '/admin/tickets'
    | '/admin/users'
    | '/users/$userId'
    | '/admin'
    | '/categories'
    | '/events'
    | '/how-it-works'
    | '/login'
    | '/organiser'
    | '/register'
    | '/tickets'
    | '/users'
    | '/admin/payments'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/organiser'
    | '/users'
    | '/admin/events'
    | '/admin/registeredEvents'
    | '/admin/tickets'
    | '/admin/users'
    | '/users/$userId'
    | '/admin/'
    | '/categories/'
    | '/events/'
    | '/how-it-works/'
    | '/login/'
    | '/organiser/'
    | '/register/'
    | '/tickets/'
    | '/users/'
    | '/admin/payments/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  OrganiserRouteRoute: typeof OrganiserRouteRouteWithChildren
  UsersRouteRoute: typeof UsersRouteRouteWithChildren
  CategoriesIndexRoute: typeof CategoriesIndexRoute
  EventsIndexRoute: typeof EventsIndexRoute
  HowItWorksIndexRoute: typeof HowItWorksIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  RegisterIndexRoute: typeof RegisterIndexRoute
  TicketsIndexRoute: typeof TicketsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organiser': {
      id: '/organiser'
      path: '/organiser'
      fullPath: '/organiser'
      preLoaderRoute: typeof OrganiserRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/tickets/': {
      id: '/tickets/'
      path: '/tickets'
      fullPath: '/tickets'
      preLoaderRoute: typeof TicketsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register/': {
      id: '/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organiser/': {
      id: '/organiser/'
      path: '/'
      fullPath: '/organiser/'
      preLoaderRoute: typeof OrganiserIndexRouteImport
      parentRoute: typeof OrganiserRouteRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/how-it-works/': {
      id: '/how-it-works/'
      path: '/how-it-works'
      fullPath: '/how-it-works'
      preLoaderRoute: typeof HowItWorksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories/': {
      id: '/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/tickets': {
      id: '/admin/tickets'
      path: '/tickets'
      fullPath: '/admin/tickets'
      preLoaderRoute: typeof AdminTicketsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/registeredEvents': {
      id: '/admin/registeredEvents'
      path: '/registeredEvents'
      fullPath: '/admin/registeredEvents'
      preLoaderRoute: typeof AdminRegisteredEventsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/events': {
      id: '/admin/events'
      path: '/events'
      fullPath: '/admin/events'
      preLoaderRoute: typeof AdminEventsRouteImport
      parentRoute: typeof AdminRouteRoute
    }
    '/admin/payments/': {
      id: '/admin/payments/'
      path: '/payments'
      fullPath: '/admin/payments'
      preLoaderRoute: typeof AdminPaymentsIndexRouteImport
      parentRoute: typeof AdminRouteRoute
    }
  }
}

interface AdminRouteRouteChildren {
  AdminEventsRoute: typeof AdminEventsRoute
  AdminRegisteredEventsRoute: typeof AdminRegisteredEventsRoute
  AdminTicketsRoute: typeof AdminTicketsRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminPaymentsIndexRoute: typeof AdminPaymentsIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminEventsRoute: AdminEventsRoute,
  AdminRegisteredEventsRoute: AdminRegisteredEventsRoute,
  AdminTicketsRoute: AdminTicketsRoute,
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminPaymentsIndexRoute: AdminPaymentsIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface OrganiserRouteRouteChildren {
  OrganiserIndexRoute: typeof OrganiserIndexRoute
}

const OrganiserRouteRouteChildren: OrganiserRouteRouteChildren = {
  OrganiserIndexRoute: OrganiserIndexRoute,
}

const OrganiserRouteRouteWithChildren = OrganiserRouteRoute._addFileChildren(
  OrganiserRouteRouteChildren,
)

interface UsersRouteRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteRouteChildren: UsersRouteRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteRouteWithChildren = UsersRouteRoute._addFileChildren(
  UsersRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  OrganiserRouteRoute: OrganiserRouteRouteWithChildren,
  UsersRouteRoute: UsersRouteRouteWithChildren,
  CategoriesIndexRoute: CategoriesIndexRoute,
  EventsIndexRoute: EventsIndexRoute,
  HowItWorksIndexRoute: HowItWorksIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  RegisterIndexRoute: RegisterIndexRoute,
  TicketsIndexRoute: TicketsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
